import { Term, NTerm, Listing } from './types';

export const terms = new Listing({
  'eof': new Term('EOF'),
  'eps': new Term('EPS'),
  'id': new Term('ID'),
  'num': new Term('NUM'),
  'int': new Term('INT'),
  'void': new Term('VOID'),
  'continue': new Term('CONT'),
  'break': new Term('BREAK'),
  'if': new Term('IF'),
  'else': new Term('ELSE'),
  'while': new Term('WHILE'),
  'return': new Term('RET'),
  'switch': new Term('SWITCH'),
  'case': new Term('CASE'),
  'default': new Term('DEF'),
  '{': new Term('{'),
  '}': new Term('}'),
  '(': new Term('('),
  ')': new Term(')'),
  '[': new Term('['),
  ']': new Term(']'),
  ',': new Term(','),
  ';': new Term(';'),
  ':': new Term(':'),
  '=': new Term('='),
  '<': new Term('<'),
  '+': new Term('+'),
  '-': new Term('-'),
  '*': new Term('*'),
});

export const nterms = new Listing({
  'program': new NTerm([['declaration-list', terms.get('eof')]]),
  'declaration-list': new NTerm([['declaration-list', 'declaration'], [terms.get('eps')]]),
  'declaration': new NTerm([['var-declaration'], ['fun-declaration']]),
  'var-declaration': new NTerm([['type-specifier', terms.get('id'), terms.get(';')], ['type-specifier', terms.get('id'), terms.get('['), terms.get('num'), terms.get(']'), terms.get(';')]]),
  'type-specifier': new NTerm([[terms.get('int')], [terms.get('void')]]),
  'fun-declaration': new NTerm([['type-specifier', terms.get('id'), terms.get('('), 'params', terms.get(')'), 'compound-stmt']]),
  'params': new NTerm([['param-list'], [terms.get('void')]]),
  'param-list': new NTerm([['param-list', terms.get(','), 'param'], ['param']]),
  'param': new NTerm([['type-specifier', terms.get('id')], ['type-specifier', terms.get('id'), terms.get('['), terms.get(']')]]),
  'compound-stmt': new NTerm([[terms.get('{'), 'declaration-list', 'statement-list', terms.get('}')]]),
  'statement-list': new NTerm([['statement-list', 'statement'], [terms.get('eps')]]),
  'statement': new NTerm([['expression-stmt'], ['compound-stmt'], ['selection-stmt'], ['iteration-stmt'], ['return-stmt'], ['switch-stmt']]),
  'expression-stmt': new NTerm([['expression', terms.get(';')], [terms.get('continue'), terms.get(';')], [terms.get('break'), terms.get(';')], [terms.get(';')]]),
  'selection-stmt': new NTerm([[terms.get('if'), terms.get('('), 'expression', terms.get(')'), 'statement', terms.get('else'), 'statement']]),
  'iteration-stmt': new NTerm([[terms.get('while'), terms.get('('), 'expression', terms.get(')'), 'statement']]),
  'return-stmt': new NTerm([[terms.get('return'), terms.get(';')], [terms.get('return'), 'expression', terms.get(';')]]),
  'switch-stmt': new NTerm([[terms.get('switch'), terms.get('('), 'expression', terms.get(')'), terms.get('{'), 'case-stmts', 'default-stmt', terms.get('}')]]),
  'case-stmts': new NTerm([['case-stmts', 'case-stmt'], [terms.get('eps')]]),
  'case-stmt': new NTerm([[terms.get('case'), terms.get('num'), terms.get(':'), 'statement-list']]),
  'default-stmt': new NTerm([[terms.get('default'), terms.get(':'), 'statement-list'], [terms.get('eps')]]),
  'expression': new NTerm([['var', terms.get('='), 'expression'], ['simple-expression']]),
  'var': new NTerm([['additive-expression', 'relop', 'additive-expression'], ['additive-expression']]),
  'relop': new NTerm([[terms.get('<')], [terms.get('='), terms.get('=')]]),
  'additive-expression': new NTerm([['additive-expression', 'addop', 'term'], ['term']]),
  'addop': new NTerm([[terms.get('+')], [terms.get('-')]]),
  'term': new NTerm([['term', terms.get('*'), 'signed-factor'], ['signed-factor']]),
  'signed-factor': new NTerm([['factor'], [terms.get('+'), 'factor'], [terms.get('-'), 'factor']]),
  'factor': new NTerm([[terms.get('('), 'expression', terms.get(')')], ['var'], ['call'], [terms.get('num')]]),
  'call': new NTerm([[terms.get('id'), terms.get('('), 'args', terms.get(')')]]),
  'args': new NTerm([['arglist'], [terms.get('eps')]]),
  'arg-list': new NTerm([['arglist', terms.get(','), 'expression'], ['expression']])
});
